#!/bin/bash

# LLM Installer CLI Wrapper
# This script activates the virtual environment and runs the Python CLI

set -e  # Exit on error

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if setup has been completed
if [ ! -f "$SCRIPT_DIR/.setup_complete" ]; then
    echo -e "${RED}[ERROR]${NC} Setup has not been completed yet."
    echo "Please run: ./setup.sh"
    exit 1
fi

# Check if virtual environment exists
if [ ! -d "$SCRIPT_DIR/.venv" ]; then
    echo -e "${RED}[ERROR]${NC} Virtual environment not found."
    echo "Please run: ./setup.sh"
    exit 1
fi

# Activate virtual environment
source "$SCRIPT_DIR/.venv/bin/activate"

# Add the project directory to PYTHONPATH
export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"

# Set default environment variables
export TRANSFORMERS_CACHE="${TRANSFORMERS_CACHE:-$HOME/LLM/cache}"
export HF_HOME="${HF_HOME:-$HOME/LLM/cache}"
export TORCH_HOME="${TORCH_HOME:-$HOME/LLM/cache}"

# Run the Python CLI with all arguments
if [ $# -eq 0 ]; then
    # No arguments - show help
    python -m core.cli --help
else
    # Pass all arguments to the CLI
    python -m core.cli "$@"
fi

# Capture the exit code
EXIT_CODE=$?

# Deactivate virtual environment
deactivate 2>/dev/null || true

# Exit with the same code as the Python script
exit $EXIT_CODE